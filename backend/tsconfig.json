{
  "compilerOptions": {
    /* Visita https://aka.ms/tsconfig para leer más sobre este archivo */

    // ? ──────────────────────────────── PROYECTOS ──────────────────────────────── */
    // "incremental": true,                              /* Guarda .tsbuildinfo para compilación incremental más rápida. */
    // "composite": true,                                /* Reglas para usar este proyecto con “project references”. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Ruta del archivo .tsbuildinfo para compilación incremental. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Al referenciar proyectos compuestos, prefiere .d.ts en lugar del código fuente. */
    // "disableSolutionSearching": true,                 /* Excluye este proyecto de verificaciones multi-proyecto al editar. */
    // "disableReferencedProjectLoad": true,             /* Reduce cuántos proyectos referenciados se cargan automáticamente. */

    // ? ──────────────────────────────── LENGUAJE Y ENTORNO ──────────────────────────────── */

    // target y lib PUEDEN INFERIRSE UNO DEL OTRO, pero lib te da tipado de APIs recientes sin cambiar el target que ya fijaste (es2022).
    // Por lo tanto, si usas lib, no es necesario especificar target
    // Target te da versiones de JS que se emitirá y librerías compatibles incluidas.

    "target": "es2023", /* Versión de JS que se emitirá y librerías compatibles incluidas. */ /* Para backend se usa es2022 y para frontend se usa esnext */
    "lib": ["ES2023"],                                        /* Conjunto de definiciones de lib (DOM, ESNext, etc.) que describen el runtime. */
    // "jsx": "preserve",                                /* Controla cómo se genera el código JSX. */
    // "libReplacement": true,                           /* Permite reemplazar libs predeterminadas (característica reciente). */
    // "experimentalDecorators": true,                   /* Habilita decoradores “legacy” (experimental). */
    // "emitDecoratorMetadata": true,                    /* Emite metadatos de tipos para decoradores (requiere reflect-metadata). */
    // "jsxFactory": "",                                 /* Fábrica JSX usada con “react” clásico (ej. React.createElement). */
    // "jsxFragmentFactory": "",                         /* Identificador para Fragment cuando se usa JSX clásico. */
    // "jsxImportSource": "",                            /* Paquete desde el cual se importan helpers JSX (react-jsx). */
    // "reactNamespace": "",                             /* Objeto usado para createElement en modo react clásico. */
    // "noLib": true,                                    /* Excluye TODAS las libs; no incluye lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emite fields de clase conforme al estándar actual. */
    // "moduleDetection": "auto",                        /* Cómo detectar si un archivo es módulo (import/export). */

    // ? ──────────────────────────────── MÓDULOS ──────────────────────────────── */

    // module y moduleResolution deben coincidir

    "module": "nodenext", /* Formato de módulos a generar (ESNext/CJS/etc.). */ /* Para backend se usa NodeNext y para frontend se usa ESNext */
    "rootDir": "./src", /* Carpeta raíz donde vive tu código fuente. */
    "moduleResolution": "nodenext", /* Estrategia para resolver imports (Node, bundler, etc.). */ /* Para backend se usa nodenext y para frontend se usa bundler */
    "baseUrl": "./", /* Directorio base para resolver imports no relativos. */
    "paths": {
      "@/*": ["./src/*"],
      "@/modules/*": ["./src/modules/*"],
    }, /* Remapea imports a rutas adicionales (alias). */
    // "rootDirs": [],                                   /* Trata múltiples carpetas como si fueran una sola al resolver. */
    // "typeRoots": [],                                  /* Carpeta(s) que actúan como node_modules/@types. */
    "types": [
      "node"
    ], /* Paquetes de tipos a incluir globalmente sin import explícito. */
    // "allowUmdGlobalAccess": true,                     /* Permite acceder a variables globales UMD desde módulos. */
    // "moduleSuffixes": [],                             /* Sufijos de archivo a intentar al resolver módulos. */
    "allowImportingTsExtensions": true,               /* Permite importar .ts/.tsx directamente (ciertas condiciones). */
    "rewriteRelativeImportExtensions": true,          /* Reescribe .ts/.tsx/.mts/.cts a su .js equivalente en el output. */
    // "resolvePackageJsonExports": true,                /* Usa el campo "exports" de package.json al resolver imports. */
    // "resolvePackageJsonImports": true,                /* Usa el campo "imports" de package.json al resolver imports. */
    // "customConditions": [],                           /* Condiciones extra para el resolver (package exports). */
    // "noUncheckedSideEffectImports": true,             /* Revisa imports de solo efectos secundarios. */
    "resolveJsonModule": true, /* Permite importar archivos .json. */
    // "allowArbitraryExtensions": true,                 /* Permite importar archivos con cualquier extensión (si hay .d.ts). */
    // "noResolve": true,                                /* Evita que nuevos imports amplíen el conjunto de archivos del proyecto. */

    // ? ──────────────────────────────── SOPORTE PARA JAVASCRIPT ──────────────────────────────── */
    // "allowJs": true,                                  /* Permite incluir archivos .js en el proyecto. */
    // "checkJs": true,                                  /* Hace type-check también sobre archivos .js. */
    // "maxNodeModuleJsDepth": 1,                        /* Profundidad máxima para analizar JS dentro de node_modules (con allowJs). */

    // ? ──────────────────────────────── EMISIÓN (OUTPUT) ──────────────────────────────── */
    // "declaration": true,                              /* Genera archivos de declaración .d.ts. */
    // "declarationMap": true,                           /* Genera sourcemaps para los .d.ts. */
    // "emitDeclarationOnly": true,                      /* Emite solo .d.ts (no JS). */
    // "sourceMap": true,                                /* Genera archivos .map para el JS emitido. */
    // "inlineSourceMap": true,                          /* Inserta los sourcemaps dentro del JS emitido. */
    // "noEmit": true,                                   /* No emite archivos al compilar. */
    // "outFile": "./",                                  /* Empaqueta todo en un solo archivo de salida (casos específicos). */
    "outDir": "./dist", /* Carpeta donde se escribirá el JS generado. */
    // "removeComments": true,                           /* No emitir comentarios en el output. */
    // "importHelpers": true,                            /* Usa helpers de tslib en lugar de inyectarlos por archivo. */
    // "downlevelIteration": true,                       /* Iteración compatible (más verbosa) para targets antiguos. */
    // "sourceRoot": "",                                 /* Ruta raíz para que el debugger encuentre el código fuente. */
    // "mapRoot": "",                                    /* Dónde debe buscar el debugger los .map. */
    // "inlineSources": true,                            /* Incluye el código fuente dentro de los sourcemaps. */
    // "emitBOM": true,                                  /* Emite BOM UTF-8 al inicio del archivo. */
    // "newLine": "crlf",                                /* Fuerza el tipo de salto de línea en el output. */
    // "stripInternal": true,                            /* No emite declaraciones marcadas con @internal. */
    // "noEmitHelpers": true,                            /* No emite helpers (útil si los proporcionas de otra forma). */
    // "noEmitOnError": true,                            /* No emite si hubo errores de type-check. */
    // "preserveConstEnums": true,                       /* No borra los const enum en el output. */
    // "declarationDir": "./",                           /* Carpeta específica para los .d.ts generados. */

    // ?  ──────────────────────────────── RESTRICCIONES DE INTEROP ──────────────────────────────── */
    // "isolatedModules": true,                          /* Cada archivo debe ser transpirable sin depender de otros. */
    // "verbatimModuleSyntax": true,                     /* No transforma imports/exports salvo los de tipo; respeta el formato. */
    // "isolatedDeclarations": true,                     /* Exige anotaciones suficientes para generar .d.ts triviales. */
    // "erasableSyntaxOnly": true,                       /* Solo permite sintaxis eliminable al compilar (sin runtime extra). */
    // "allowSyntheticDefaultImports": true,             /* Permite `import x from` aunque no exista default export real. */
    "esModuleInterop": true, /* Facilita importar módulos CommonJS como si tuvieran default. */
    // "preserveSymlinks": true,                         /* No resuelve symlinks al path real (igual que Node). */
    "forceConsistentCasingInFileNames": true, /* Exige mayúsc/minúsculas coherentes en imports (evita bugs cross-OS). */

    // ? ──────────────────────────────── REVISIÓN DE TIPOS ──────────────────────────────── */
    "strict": true, /* Activa el modo estricto (todas las comprobaciones fuertes). */
    // "noImplicitAny": true,                            /* Error si algo queda tipado como `any` implícito. */
    // "strictNullChecks": true,                         /* Trata `null`/`undefined` de forma estricta. */
    // "strictFunctionTypes": true,                      /* Verificación estricta al asignar funciones. */
    // "strictBindCallApply": true,                      /* Verificación estricta de bind/call/apply. */
    // "strictPropertyInitialization": true,             /* Requiere inicializar propiedades de clase en el constructor. */
    // "strictBuiltinIteratorReturn": true,              /* Iteradores built-in usan TReturn = undefined (no any). */
    // "noImplicitThis": true,                           /* Error si `this` es `any`. */
    // "useUnknownInCatchVariables": true,               /* `catch (e)` se tipa como `unknown` por defecto. */
    // "alwaysStrict": true,                             /* Emite 'use strict' siempre. */
    // "noUnusedLocals": true,                           /* Error si hay variables locales sin usar. */
    // "noUnusedParameters": true,                       /* Error si hay parámetros sin usar. */
    "exactOptionalPropertyTypes": true, /* Respeta exactamente los tipos opcionales (no añade `undefined`). */
    // "noImplicitReturns": true,                        /* Error si una función no retorna en todos los caminos. */
    // "noFallthroughCasesInSwitch": true,               /* Error si hay “fallthrough” en switch sin `break`. */
    "noUncheckedIndexedAccess": true, /* Añade `undefined` al tipo al indexar (arrays/maps). */
    // "noImplicitOverride": true,                       /* Requiere el modificador `override` al sobreescribir. */
    // "noPropertyAccessFromIndexSignature": true,       /* Obliga a usar acceso indexado cuando el tipo lo declara así. */
    // "allowUnusedLabels": true,                        /* No marca error por labels sin usar. */
    // "allowUnreachableCode": true,                     /* No marca error por código inalcanzable. */

    // ? ──────────────────────────────── COMPLETITUD ──────────────────────────────── */
    // "skipDefaultLibCheck": true,                      /* Omite type-check de las libs por defecto. */
    "skipLibCheck": true /* Omite type-check de todos los .d.ts (acelera compilación). */
  },

  // ?  ──────────────────────────────── EXCLUSIONES ──────────────────────────────── */
  "exclude": [
    "node_modules",
    "https" // (probable carpeta propia que quieres excluir)
  ]
}
