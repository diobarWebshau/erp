
import MainActionButtonCustom from "../../primitives/button/custom-button/main-action/MainActionButtonCustom";
import DialogModal from "../../primitives/modal2/dialog-modal/base/DialogModal";
import styleModule from "./SelectPurchasedModal.module.css"
import { CircleX, Plus } from "lucide-react";
import type { IPurchasedOrder } from "interfaces/purchasedOrder";
import TertiaryActionButtonCustom from "../../primitives/button/custom-button/tertiary-action/TertiaryActionButtonCustom";
import { getEnumoSingleLabel } from "../../primitives/table/tableContext/tableTypes";
import type { ColumnDef } from "@tanstack/react-table";
import { useCallback, useMemo, useState } from "react";
import Tag from "../../primitives/tag/Tag";
import GenericTable from "../../primitives/table/tableContext/GenericTable";
import type { IPurchasedOrderProduct } from "interfaces/purchasedOrdersProducts";
import type { IPartialShippingOrderPurchasedOrderProduct } from "interfaces/shippingPurchasedProduct";
import { DateUtils } from "../../../utils/dayJsUtils";

interface ISelectPurchasedModal {
    onClose: () => void;
    purchasedOrders: IPurchasedOrder[];
    onAdd: (sopops: IPartialShippingOrderPurchasedOrderProduct[]) => void;
}

const SelectPurchasedModal = ({
    onClose,
    purchasedOrders,
    onAdd
}: ISelectPurchasedModal) => {

    const data = useMemo(() => purchasedOrders ?? [], [purchasedOrders]);

    const getRowId = useCallback((row: IPurchasedOrder) => row.id.toString(), []);


    const [selectedPurchasedOrders, setSelectedPurchasedOrders] = useState<IPurchasedOrder[]>([]);

    const asignedMaxQty = useCallback((pop: IPurchasedOrderProduct) => {
        const orderQty = Number(pop.qty ?? 0);
        const shippedQty = Number(pop.shipping_summary?.shipping_qty ?? 0);
        const remaining = orderQty - shippedQty;
        return remaining;
    }, []);

    const handleAddPurchasedOrder = useCallback(() => {
        if (selectedPurchasedOrders.length === 0) return;
        const popsArray: IPurchasedOrderProduct[][] = selectedPurchasedOrders.map(p => p.purchase_order_products as IPurchasedOrderProduct[] ?? []);
        const popsFlat: IPurchasedOrderProduct[] = popsArray.flat();
        const sopops: IPartialShippingOrderPurchasedOrderProduct[] = popsFlat.map(p => ({
            purchase_order_products: p,
            purchase_order_product_id: p.id,
            qty: asignedMaxQty(p),
            location_id: p.purchase_order_product_location_production_line?.production_line?.location_production_line?.location?.id,
            location_name: p.purchase_order_product_location_production_line?.production_line?.location_production_line?.location?.name,
            location: p.purchase_order_product_location_production_line?.production_line?.location_production_line?.location,
        }));
        onAdd(sopops);
        onClose();
    }, [selectedPurchasedOrders, onAdd, onClose]);

    const columns: ColumnDef<IPurchasedOrder>[] = useMemo(() => [
        {
            accessorKey: "order_code",
            header: "Order ID",
            meta: {
                hidden: false,
                autoGenerated: true,
                type: "string"
            }
        },
        {
            accessorKey: "created_at",
            header: "Fecha de orden",
            meta: {
                hidden: false,
                autoGenerated: true,
                type: "date",
                mode: "single"
            },
            cell: ({ getValue }) => DateUtils.format((getValue() as string | Date), "DD/MM/YYYY"),
        },
        {
            id: "client",
            accessorFn: (row) => row.client?.company_name,
            header: "Cliente",
            meta: {
                hidden: false,
                autoGenerated: true,
                type: "string",
            }
        },
        {
            accessorKey: "delivery_date",
            header: "Fecha estimada de entrega",
            meta: {
                hidden: false,
                autoGenerated: true,
                type: "date",
                mode: "range"
            },
            cell: ({ getValue }) => DateUtils.format((getValue() as string | Date), "DD/MM/YYYY"),
        },
        {
            accessorKey: "status",
            header: "Estado",
            meta: {
                hidden: false,
                autoGenerated: true,
                type: "enum",
                enumOptions: [
                    { label: "Pendiente", value: "pending" },
                    { label: "EnvÃ­o parcial", value: "partially_shipping" },
                    { label: "Enviado", value: "shipping" },
                    { label: "Finalizado", value: "finished" },
                ]
            },
            cell: ({ getValue, column }) => {
                const valor = getValue() as string;
                const labelEnum = getEnumoSingleLabel(column.columnDef, valor) || "";
                return (
                    <Tag
                        label={labelEnum}
                        className={`${styleModule[valor.toLowerCase()]}`}
                    />
                );
            }
        }
    ], []);

    const handleRowSelectionChange = useCallback((next: IPurchasedOrder[]) => {
        setSelectedPurchasedOrders(prev => {
            if (
                prev.length === next.length &&
                prev.every((p, i) => p.id === next[i]?.id)
            ) {
                return prev;
            }
            return next;
        });
    }, []);

    return (
        <DialogModal
            className={styleModule.containerDialogModal}
            onClose={onClose}
        >
            <div className={styleModule.containerContent}>

                <div className={styleModule.containerBody}>
                    <GenericTable
                        modelName="purchased_orders"

                        // distribuccion de columnas y rows
                        columns={columns}
                        data={data}

                        // funcionalidades 
                        enablePagination
                        enableRowSelection
                        onRowSelectionChangeExternal={handleRowSelectionChange}

                        // acciones 
                        getRowId={getRowId}
                        classNameGenericTableContainer={styleModule.genericTableContainer}
                    />
                </div>
                <div className={styleModule.containerFooter}>
                    <TertiaryActionButtonCustom
                        label="Cancelar"
                        onClick={onClose}
                        icon={<CircleX />}
                    />
                    <MainActionButtonCustom
                        label="Agregar orden"
                        icon={<Plus />}
                        onClick={handleAddPurchasedOrder}
                        disabled={selectedPurchasedOrders.length === 0}
                    />
                </div>
            </div>
        </DialogModal>
    );
};


export default SelectPurchasedModal;


