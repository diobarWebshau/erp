
import MainActionButtonCustom from "../../primitives/button/custom-button/main-action/MainActionButtonCustom";
import DialogModal from "../../primitives/modal2/dialog-modal/base/DialogModal";
import styleModule from "./SelectPurchasedModal.module.css"
import { Plus } from "lucide-react";
import type { IPurchasedOrder } from "interfaces/purchasedOrder";
import TertiaryActionButtonCustom from "../../primitives/button/custom-button/tertiary-action/TertiaryActionButtonCustom";
import { getEnumoSingleLabel } from "../../primitives/table/tableContext/tableTypes";
import type { ColumnDef } from "@tanstack/react-table";
import { useMemo } from "react";
import Tag from "../../primitives/tag/Tag";
import GenericTable from "../../primitives/table/tableContext/GenericTable";
// import GenericTable from "../../primitives/table/tableContext/GenericTable";

interface ISelectPurchasedModal {
    onClose: () => void;
    purchasedOrders: IPurchasedOrder[];
    onAdd: (IPurchaseOrder: IPurchasedOrder[]) => void;
}



const SelectPurchasedModal = ({
    onClose,
    purchasedOrders,
    onAdd
}: ISelectPurchasedModal) => {


    const columns: ColumnDef<IPurchasedOrder>[] = useMemo(() => [
        {
            accessorKey: "order_code",
            header: "Order ID",
            meta: {
                hidden: false,
                autoGenerated: true,
                type: "string"
            }
        },
        {
            accessorKey: "created_at",
            header: "Fecha de orden",
            meta: {
                hidden: false,
                autoGenerated: true,
                type: "date",
                mode: "single"
            }
        },
        {
            id: "client",
            accessorFn: (row) => row.client?.company_name,
            header: "Cliente",
            meta: {
                hidden: false,
                autoGenerated: true,
                type: "string",
            }
        },
        {
            accessorKey: "delivery_date",
            header: "Fecha estimada de entrega",
            meta: {
                hidden: false,
                autoGenerated: true,
                type: "date",
                mode: "range"
            }
        },
        {
            accessorKey: "status",
            header: "Estado",
            meta: {
                hidden: false,
                autoGenerated: true,
                type: "enum",
                enumOptions: [
                    { label: "Pendiente", value: "pending" },
                    { label: "Completado", value: "completed" },
                    { label: "Entregado", value: "delivered" },
                    { label: "Cancelado", value: "cancelled" },
                ]
            },
            cell: ({ getValue, column }) => {
                const valor = getValue() as string;
                const labelEnum = getEnumoSingleLabel(column.columnDef, valor) || "";
                return (
                    <Tag
                        label={labelEnum}
                        className={`${styleModule[valor.toLowerCase()]}`}
                    />
                );
            }
        }
    ], []);


    return (
        <DialogModal
            classNameCustomContainer={styleModule.containerDialogModal}
            onClose={onClose}
        >
            <div className={styleModule.containerContent}>
                <div className={styleModule.containerHeader}></div>
                <div className={styleModule.containerBody}>
                    <GenericTable
                        modelName="purchased_orders"

                        /* distribuccion de columnas y rows */
                        columns={columns}
                        data={purchasedOrders ? purchasedOrders : []}

                        /* funcionalidades */
                        enablePagination
                        enableRowSelection

                        /* acciones */
                        onDeleteSelected={() => { }}
                        getRowId={(row, _) => row.id.toString()}
                        classNameGenericTableContainer={styleModule.genericTableContainer}
                    />
                </div>
                <div className={styleModule.containerFooter}>
                    <TertiaryActionButtonCustom
                        label="Cancelar"
                        onClick={onClose}
                    />
                    <MainActionButtonCustom
                        label="Agregar orden"
                        icon={<Plus />}
                        onClick={() => { }}
                    />
                </div>
            </div>
        </DialogModal>
    );
};


export default SelectPurchasedModal;
