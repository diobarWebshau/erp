import type {
    ColumnDef
} from "@tanstack/react-table";
import type {
    IProductionOrder
} from "../../../../../interfaces/productionOrder";
import stylesModules from "./columns.module.css";
import { Progress } from "@mantine/core";

interface IColumnsProductionOrdersProps {
    onClickContent  : (e: React.MouseEvent) => void;
}


const columnsProductionOrders = ({
    onClickContent,
}: IColumnsProductionOrdersProps): ColumnDef<IProductionOrder>[] => [
        {
            accessorKey: "id",
            header: "Order ID",
            meta: {
                hidden: false,
                type: "number",
                mode: "range",
                autoGenerated: true,
            },
        },
        {
            accessorKey: "product_name",
            header: "Producto",
            meta: {
                hidden: false,
                type: "string",
                typeText: "text",
                autoGenerated: false,
            },
        },
        {
            id: "planta",
            header: "Planta",
            accessorFn: (row) => row.extra_data?.location.name,
            cell: ({ row }) => {
                const locationName = row.original.extra_data?.location.name;
                return <div
                    className={stylesModules.containerTextDecoration}
                    onClick={(e) => onClickContent(e)}
                >
                    {locationName}
                </div>; 
            },
            meta: {
                hidden: false,
                type: "string",
                typeText: "text",
                autoGenerated: false,
            },
        }, {
            id: "lineaProduccion",
            header: "Linea de produccion",
            accessorFn: (row) => row.extra_data?.production_line.name,
            cell: ({ row }) => {
                const productionLineName = row.original.extra_data?.production_line.name;
                const isActive = row.original.extra_data?.production_line.is_active;
                return (
                    <div
                        className={
                            `${stylesModules.containerTextDecoration} ` +
                            `${isActive
                                ? stylesModules.containerProductionLine
                                : stylesModules.containerProductionLineInactive}
                            `
                        }
                        onClick={(e) => onClickContent(e)}
                    >
                        {productionLineName}
                    </div>
                );
            },
            meta: {
                hidden: false,
                type: "string",
                typeText: "text",
                autoGenerated: false,
            },
        },
        {
            accessorFn: (row) => row.extra_data?.production_qty,
            header: "Progreso",
            cell: ({ row }) => {
                const productionQty = Number(Number(row.original.extra_data?.production_qty).toFixed(2)) ?? 0;
                const total_order = Number(Number(row.original.qty).toFixed(2)) ?? 0;
                return <div className={stylesModules.containerProgressIsNotCompleted}>
                    <span className={stylesModules.containerProgress}>
                        <Progress
                            radius="lg"
                            size="md"
                            value={productionQty}
                            striped
                            animated
                            classNames={{
                                root: stylesModules.progressBar,
                                label: stylesModules.labelProgressBar,
                                section: stylesModules.sectionProgressBar,
                            }}
                        />
                    </span>
                    <span className={stylesModules.containerProgressText}>
                        {productionQty} / {total_order}
                    </span>
                </div>
            }
        },
        {
            accessorFn: (row) => row.extra_data?.scrap_qty,
            header: "Scrap",
            cell: ({ row }) => {
                const scrapQty = row.original.extra_data?.scrap_qty;
                return <div>
                    {scrapQty}
                </div>;
            }
        },
        {
            accessorKey: "status",
            header: "Estado",
            meta: {
                hidden: false,
                type: "string",
                autoGenerated: false,
                typeText: "text",
            },
            cell: ({ getValue }) => {
                const status = getValue() as string;
                return (
                    <span
                        className={'nunito-semibold ' +
                            `${stylesModules.tag} ${stylesModules[status.toLowerCase()]}`
                        }>{status}
                    </span>
                );
            },
        },
        // ! COLUMNAS OCULTAS ************************************************** */
        {
            accessorKey: "qty",
            header: "Quantity",
            meta: {
                hidden: true,
                type: "number",
                mode: "range",
                autoGenerated: false,
            },
        },
        {
            accessorKey: "order_id",
            header: "Order ID",
            meta: {
                hidden: true,
                type: "number",
                mode: "single",
                autoGenerated: false,
            },
        },
        {
            accessorKey: "product_id",
            header: "Product ID",
            meta: {
                hidden: true,
                type: "number",
                mode: "single",
                autoGenerated: false,
            },
        },
        {
            accessorKey: "order_type",
            header: "Order Type",
            meta: {
                hidden: true,
                type: "enum",
                autoGenerated: false,
                options: ["internal", "client"],
            },
        },
        {
            accessorKey: "created_at",
            header: "Created At",
            meta: {
                hidden: true,
                type: "date",
                mode: "single",
                autoGenerated: true,
            },
        },
        {
            accessorKey: "updated_at",
            header: "Updated At",
            meta: {
                hidden: true,
                type: "date",
                mode: "single",
                autoGenerated: true,
            },
        },
    ];

export { columnsProductionOrders };
