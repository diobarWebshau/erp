import type { ColumnDef } from "@tanstack/react-table";
import type { IShippingOrder } from "../../../../../interfaces/shippingOrder";
import stylesModules from "./columns.module.css";
import Tag from "../../../../../comp/primitives/tag/Tag";
import { getEnumoSingleLabel } from "../../../../../comp/primitives/table/tableContext/tableTypes";
import clsx from "clsx";
import { useCallback, useMemo } from "react";

interface StatusActionsProps {
    value: string;
    onClick?: (record: IShippingOrder) => void;
}

const generateColumnsShippingOrders = (statusActions: StatusActionsProps[]) => {
    const columnsShippingOrders: ColumnDef<IShippingOrder>[] = [
        {
            accessorKey: "code",
            header: "Envio ID",
            meta: {
                hidden: false,
                type: "string",
                typeText: "text",
                autoGenerated: false,
            },
        },
        {
            id: "location",
            header: "Ubicacion",
            accessorFn: (row) => row.shipping_order_purchase_order_product?.[0].purchase_order_products?.purchase_order_product_location_production_line?.production_line?.location_production_line?.location?.name,
            meta: {
                hidden: false,
                type: "string",
                typeText: "text",
                autoGenerated: false,
            },
        },
        {
            id: "cliente",
            header: "Cliente",
            accessorFn: (row) => row.shipping_order_purchase_order_product?.[0].purchase_order_products?.purchase_order?.client?.company_name,
            meta: {
                hidden: false,
                type: "string",
                typeText: "text",
                autoGenerated: false,
            },
        },
        {
            id: "carrier",
            header: "Transportista",
            accessorFn: (row) => row.carrier?.name,
            meta: {
                hidden: false,
                type: "string",
                typeText: "text",
                autoGenerated: false,
            },
        },
        {
            id: "delivery_date",
            header: "Entrega estimada",
            accessorFn: (row) => row.delivery_date,
            meta: {
                hidden: false,
                type: "date",
                mode: "range",
                autoGenerated: false,
            },
        },
        {
            id: "shipping_date",
            header: "Fecha de envio",
            accessorFn: (row) => row.shipping_date,
            meta: {
                hidden: false,
                type: "date",
                mode: "range",
                autoGenerated: false,
            },
        },

        {
            accessorKey: "status",
            header: "Status",
            meta: {
                hidden: false,
                type: "enum",
                enumOptions: [
                    { label: "Pendiente", value: "released" },
                    { label: "Enviado", value: "shipping" },
                    { label: "Finalizado", value: "finished" },
                ],
                autoGenerated: false,
            },
            cell: ({ getValue, column, row }) => {
                const status = getValue() as string;
                const onClick = useMemo(
                    () => statusActions.find((action) => action.value === status)?.onClick || null,
                    [statusActions, status]
                );
                const labelEnum = getEnumoSingleLabel(column.columnDef, status) || "";

                const onClickWrapper = useCallback(
                    () => onClick ? onClick(row.original) : null,
                    [onClick, row]);
                    
                return (
                    <Tag
                        label={labelEnum}
                        className={clsx(stylesModules.tag, stylesModules[status.toLowerCase()])}
                        {...(onClick ? { onClick: onClickWrapper } : {})}
                    />
                );
            },
        },
    ];
    return columnsShippingOrders;
}


export { generateColumnsShippingOrders };
