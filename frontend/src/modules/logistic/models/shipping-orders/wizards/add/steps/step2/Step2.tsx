import CriticalActionButton from "../../../../../../../../comp/primitives/button/custom-button/critical-action/CriticalActionButton";
import MainActionButtonCustom from "../../../../../../../../comp/primitives/button/custom-button/main-action/MainActionButtonCustom";
import { ChevronLeft, ChevronRight, Plus, Search } from "lucide-react";
import StyleModule from "./Step2.module.css";
import TertiaryActionButtonCustom from "../../../../../../../../comp/primitives/button/custom-button/tertiary-action/TertiaryActionButtonCustom";
import { useShippingOrderDispatch, useShippingOrderState } from "../../../../context/shippingOrderHooks";
import { back_step, next_step, update_shipping_order_purchased_order_products } from "../../../../context/shippingOrderActions";
import { memo, useCallback, useEffect, useMemo, useState } from "react";
import DateInputMantine from "./../../../../../../../../comp/external/mantine/date/input/base/DateInputMantine"
import type { ColumnDef } from "@tanstack/react-table";
import type { IPartialShippingOrderPurchasedOrderProduct } from "interfaces/shippingPurchasedProduct";
import useLocationsProducedOneProduct from "./../../../../../../../../modelos/locations/hooks/useLocationsProducedOneProduct"
import ObjectSelectCustom from "./../../../../../../../../comp/primitives/select/object-select/custom/ObjectSelectCustom"
import GeneralTable from "./../../../../../../../../comp/primitives/table/tableContext/GenericTable";
import type { ILocation } from "interfaces/locations";
import NumericInputCustom from "./../../../../../../../../comp/primitives/input/numeric/custom/NumericInputCustom";
import { formatNumber } from "./../../../../../../../../helpers/formttersNumeric";
import Tag from "./../../../../../../../../comp/primitives/tag/Tag";
import usePurchasedOrders from "../../../../../../../../modelos/purchased_orders/hooks/usePurchasedOrders";
import type { IPartialPurchasedOrder, IPurchasedOrder } from "interfaces/purchasedOrder";
import SelectPurchasedModal from "../../../../../../../../comp/features/modal-purchase/SelectPurchasedModal";

interface IStep2 {
    onClose: () => void;
}

const Step2 = ({
    onClose
}: IStep2) => {

    const state = useShippingOrderState();
    const dispatch = useShippingOrderDispatch();

    const [purchase_orders, client_name, purchaseOrder]: [IPartialPurchasedOrder[], string, IPurchasedOrder] = useMemo(() => {
        const purchase_orders = (state.data?.shipping_order_purchase_order_product ?? [])
            .map(p => p.purchase_order_products?.purchase_order)
            .filter((p): p is IPartialPurchasedOrder => p !== undefined);
        const purchaseOrder = [...purchase_orders].shift() as IPurchasedOrder;
        const client_name = purchaseOrder.client?.company_name || "";
        return [purchase_orders, client_name, purchaseOrder];
    }, [state.data?.shipping_order_purchase_order_product]);

    const [deliveryDate, setDeliveryDate] = useState<Date | null>(null);
    const [isActiveAddNewOrderModal, setIsActiveAddNewOrderModal] = useState<boolean>(false);

    const {
        purchasedOrders,
        loadingPurchasedOrders
    } = usePurchasedOrders(client_name);

    const handleOnClickPrevious = () => {
        dispatch(back_step());
    };
    const handleOnClickNext = () => {
        dispatch(next_step());
    };

    const filterPurchasedOrderAlreadySelected = (
        purchasedOrders: IPurchasedOrder[], selectedPurchasedOrder: IPartialPurchasedOrder[]
    ) => {
        return purchasedOrders.filter(p => !selectedPurchasedOrder.some(sp => sp.id === p.id));
    };

    const toggleAddNewOrderModal = () => {
        setIsActiveAddNewOrderModal(!isActiveAddNewOrderModal);
    };

    const handleAddPurchasedOrder = (purchasedOrders: IPurchasedOrder[]) => {
    };

    const columns: ColumnDef<IPartialShippingOrderPurchasedOrderProduct>[] = useMemo(() => [
        {
            id: "order_id",
            header: "Orden ID",
            accessorFn: (row) => row.purchase_order_products?.purchase_order?.order_code,
            meta: {
                hidden: false,
                autoGenerated: true,
                type: "string",
            },
        },
        {
            id: "sku",
            accessorFn: (row) => row.purchase_order_products?.product?.sku,
            header: "SKU",
        },
        {
            id: "product",
            accessorFn: (row) => row.purchase_order_products?.product?.name,
            header: "Producto",
        },
        {
            id: "qty",
            header: "Cantidad",
            accessorFn: (row) => row.purchase_order_products?.qty,
            meta: {
                hidden: false,
                autoGenerated: true,
                type: "number",
            },
            cell: (row) => {
                const record = row.row.original;
                const valueQty: number = record.qty || 0;
                return (
                    <div>
                        {formatNumber(valueQty)}
                    </div>
                );
            }
        },
        {
            id: "qty_delivery",
            header: "Cantidad enviada",
            meta: {
                hidden: false,
                autoGenerated: true,
                type: "number",
            },
            cell: (row) => {
                const record = row.row.original;
                const valueQty: number = record.purchase_order_products?.shipping_summary?.shipping_qty || 0;
                return (
                    <div>
                        {`${formatNumber(valueQty)} / ${formatNumber(record.purchase_order_products?.qty || 0)}`}
                    </div>
                );
            }
        },
        {
            id: "quantity",
            accessorKey: "qty",
            header: "Cantidad a enviar",
            cell: ({ row }) => (
                <QuantityCell record={row.original} dispatch={dispatch} />
            )
        },
        {
            id: "disponibilidad ",
            header: "Disponibilidad",
            cell: (row) => {
                const inventory = row.row.original.location?.inventory;
                const qty = row.row.original.qty ?? 0;
                const available = inventory?.available || 0;
                const minimumStock = inventory?.minimum_stock || 0;
                let className: string;

                if (available < qty) {
                    className = StyleModule.tagError;
                } else if (available >= qty && (available + qty) > minimumStock) {
                    className = StyleModule.tagSuccess;
                } else {
                    className = StyleModule.tagWarning;
                }

                return (
                    <Tag
                        label={formatNumber(available)}
                        className={className}
                    />
                );
            }
        }, {
            id: "location",
            header: "Ubicación",
            cell: ({ row }) => <LocationCell record={row.original} dispatch={dispatch} />
        }
    ], []);

    return (
        <div className={StyleModule.container}>
            <div className={StyleModule.header}>
                <h2 className="nunito-bold">Step 2</h2>
                <MainActionButtonCustom
                    onClick={toggleAddNewOrderModal}
                    label="Agregar orden"
                    icon={<Plus />}
                />
            </div>
            <div className={StyleModule.subheader}>
                <div className={StyleModule.subHeaderLeft}>
                    <p className={`nunito-bold ${StyleModule.subTitle}`}>{purchaseOrder?.client?.company_name}</p>
                    <p className="nunito-semibold">{purchaseOrder?.client?.email}</p>
                    <p className="nunito-semibold">{`Tel. ${purchaseOrder?.client?.phone}`}</p>
                    <p className="nunito-semibold">{`${purchaseOrder?.client?.city}, ${purchaseOrder?.client?.state}, ${purchaseOrder?.client?.country}`}</p>
                    <p className="nunito-semibold">{purchaseOrder?.client?.address}</p>
                </div>
                <div className={StyleModule.subHeaderRight}>
                    <div>
                        <span>Entrega estimada:</span>
                        <DateInputMantine
                            value={deliveryDate}
                            onChange={setDeliveryDate}
                            className={StyleModule.inputDeliveryDate}
                        />
                    </div>
                    <div>
                        <span className="nunito-bold">Dirección de envío</span>
                        <p>{`${purchaseOrder?.shipping_city}, ${purchaseOrder?.shipping_state}, ${purchaseOrder?.shipping_country}`}</p>
                        <p>{purchaseOrder?.shipping_address}</p>
                    </div>
                </div>
            </div>

            <div className={StyleModule.content}>
                <GeneralTable
                    modelName="shipping_order_purchase_order_product"
                    columns={columns}
                    data={state.data?.shipping_order_purchase_order_product as IPartialShippingOrderPurchasedOrderProduct[]}
                    onDeleteSelected={() => { }}
                    enableRowSelection
                    classNameGenericTableContainer={StyleModule.genericTableContainer}

                    getRowId={(row) => `${row.purchase_order_product_id?.toString()}-${row.purchase_order_products?.purchase_order_id?.toString() || ""}`}
                />
            </div>
            <div className={StyleModule.footerSection}>
                <CriticalActionButton
                    onClick={onClose}
                    label="Cancelar"
                />
                <TertiaryActionButtonCustom
                    onClick={handleOnClickPrevious}
                    label="Regresar"
                    icon={<ChevronLeft />}
                />
                <MainActionButtonCustom
                    onClick={handleOnClickNext}
                    label="Siguiente"
                    icon={<ChevronRight />}
                />
            </div>
            {
                isActiveAddNewOrderModal && !loadingPurchasedOrders && (
                    <SelectPurchasedModal
                        onClose={toggleAddNewOrderModal}
                        onAdd={handleAddPurchasedOrder}
                        purchasedOrders={filterPurchasedOrderAlreadySelected(purchasedOrders, purchase_orders)}
                    />
                )
            }
        </div>
    )
}

export default Step2;

// *********** QuantityCell ***********

const QuantityCell = memo(
    ({
        record,
        dispatch,
    }: {
        record: IPartialShippingOrderPurchasedOrderProduct;
        dispatch: any;
    }) => {
        const valueQty = record.qty || 0;

        const handleChange = useCallback(
            (value: number) => {
                dispatch(
                    update_shipping_order_purchased_order_products({
                        id: record.purchase_order_product_id ?? 0,
                        attributes: { qty: value },
                    })
                );
            },
            [dispatch, record.purchase_order_product_id]
        );

        const limitQty =
            Number(record.purchase_order_products?.qty ?? 0) -
            Number(record.purchase_order_products?.shipping_summary?.shipping_qty ?? 0);

        return (
            <NumericInputCustom
                value={valueQty}
                onChange={handleChange}
                onlyCommitOnBlur
                max={limitQty}
            />
        );
    }
);

// *********** LocationCell ***********

interface LocationCellProps {
    record: IPartialShippingOrderPurchasedOrderProduct;
    dispatch: any;
}

const LocationCell = memo(({ record, dispatch }: LocationCellProps) => {

    const { loadingLocationsProducedProduct, locationsProducedProduct } =
        useLocationsProducedOneProduct(record.purchase_order_products?.product?.id);

    const handleOnChangeLocation = useCallback(
        (location: ILocation | null | undefined) => {
            dispatch(update_shipping_order_purchased_order_products({
                id: record.purchase_order_product_id ?? 0,
                attributes: { location: location ?? undefined }
            }));
        },
        [dispatch, record.purchase_order_product_id]
    );

    useEffect(() => {
        if (!record.location && locationsProducedProduct.length > 0) {
            const initialLocation = locationsProducedProduct.find(
                loc => loc.id === record.purchase_order_products?.purchase_order_product_location_production_line
                    ?.production_line?.location_production_line?.location?.id
            );
            if (initialLocation) handleOnChangeLocation(initialLocation);
        }
    }, [locationsProducedProduct, handleOnChangeLocation, record.location]);

    return (
        <div className={StyleModule.objectSelectContainer}>
            {!loadingLocationsProducedProduct && (
                <ObjectSelectCustom
                    options={locationsProducedProduct}
                    labelKey="name"
                    value={record.location as ILocation}
                    defaultLabel="Selecciona una ubicación"
                    onChange={handleOnChangeLocation}
                />
            )}
        </div>
    );
});