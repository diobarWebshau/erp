import type { ColumnDef } from "@tanstack/react-table";
import GenericTable from "../../../../../../../../comp/primitives/table/tableContext/GenericTable";
import StyleModule from "./Step1.module.css";
import type { IPurchasedOrder } from "../../../../../../../../interfaces/purchasedOrder";
import CriticalActionButton from "../../../../../../../../comp/primitives/button/custom-button/critical-action/CriticalActionButton";
import MainActionButtonCustom from "../../../../../../../../comp/primitives/button/custom-button/main-action/MainActionButtonCustom";
import { ChevronRight, Search } from "lucide-react";
import { useState } from "react";
import InputTextCustom from "../../../../../../../../comp/primitives/input/text/custom/InputTextCustom";
import usePurchasedOrders from "../../../../../../../../modelos/purchased_orders/hooks/usePurchasedOrders";

const columns: ColumnDef<IPurchasedOrder>[] = [
    {
        accessorKey: "order_code",
        header: "Order ID",
        meta: {
            hidden: false,
            autoGenerated: true,
            type: "string"
        }
    },
    {
        accessorKey: "created_at",
        header: "Fecha de orden",
        meta: {
            hidden: false,
            autoGenerated: true,
            type: "date"
        }
    },
    {
        id: "client",
        accessorFn: (row) => row.client?.company_name,
        header: "Cliente",
        meta: {
            hidden: false,
            autoGenerated: true,
            type: "string"
        }
    },
    {
        accessorKey: "delivery_date",
        header: "Fecha estimada de entrega",
        meta: {
            hidden: false,
            autoGenerated: true,
            type: "date"
        }
    },
    {
        accessorKey: "status",
        header: "Estado",
        meta: {
            hidden: false,
            autoGenerated: true,
            type: "string"
        }
    }
]

interface IStep1 {
    onClose: () => void;
}


const Step1 = ({
    onClose
}: IStep1) => {

    const [search, setSearch] = useState<string>('');
    const [selectedPurchasedOrder, setSelectedPurchasedOrder] = useState<IPurchasedOrder | null>(null);

    const {
        purchasedOrders,
    } = usePurchasedOrders(search);

    const ExtraComponent = () => {
        return (
            <InputTextCustom
                value={search}
                onChange={setSearch}
                placeholder="Buscar"
                icon={<Search />}
            />
        )
    }

    const handleRowEditClick = (row: IPurchasedOrder) => {
        setSelectedPurchasedOrder(row);
    }

    return (
        <div className={StyleModule.container}>

            <span className={`nunito-bold ${StyleModule.title}`}>Selecciona una orden</span>

            <GenericTable
                modelName="purchased_orders"

                /* distribuccion de columnas y rows */
                columns={columns}
                data={purchasedOrders ? purchasedOrders : []}

                /* funcionalidades */
                enablePagination
                enableFilters
                enableSorting
                enableRowEditClick

                /* acciones */
                enableRowEditClickHandler={handleRowEditClick}

                /* componentes extra */
                extraComponents={ExtraComponent}

                /* acciones */
                onDeleteSelected={() => { }}
                getRowId={(row) => row.id.toString()}
            />

            <div className={StyleModule.footerSection}>
                <CriticalActionButton
                    onClick={onClose}
                    label="Cancelar"
                />
                <MainActionButtonCustom
                    onClick={() => { }}
                    label="Siguiente"
                    icon={<ChevronRight />}
                />
            </div>

        </div>
    )
}

export default Step1;
