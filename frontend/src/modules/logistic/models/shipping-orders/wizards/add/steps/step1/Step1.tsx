import type { ColumnDef, Row, RowSelectionState } from "@tanstack/react-table";
import GenericTable from "../../../../../../../../comp/primitives/table/tableContext/GenericTable";
import StyleModule from "./Step1.module.css";
import type { IPurchasedOrder } from "../../../../../../../../interfaces/purchasedOrder";
import CriticalActionButton from "../../../../../../../../comp/primitives/button/custom-button/critical-action/CriticalActionButton";
import MainActionButtonCustom from "../../../../../../../../comp/primitives/button/custom-button/main-action/MainActionButtonCustom";
import { ChevronRight, Search } from "lucide-react";
import { useState } from "react";
import InputTextCustom from "../../../../../../../../comp/primitives/input/text/custom/InputTextCustom";
import usePurchasedOrders from "../../../../../../../../modelos/purchased_orders/hooks/usePurchasedOrders";
import { useShippingOrderDispatch, useShippingOrderState } from "../../../../context/shippingOrderHooks";
import { useMemo } from "react";
import type { IPartialPurchasedOrder } from "../../../../../../../../interfaces/purchasedOrder";
import { diffObjectArrays } from "./../../../../../../../../utils/validation-on-update/validationOnUpdate";
import { add_shipping_order_purchased_order_products, next_step, remove_shipping_order_purchased_order_products } from "../../../../context/shippingOrderActions";
import type { IPartialShippingOrderPurchasedOrderProduct } from "interfaces/shippingPurchasedProduct";
import type { IPurchasedOrderProduct } from "interfaces/purchasedOrdersProducts";
import { getEnumoSingleLabel, type TableStatePartial } from "../../../../../../../../comp/primitives/table/tableContext/tableTypes";
import { Loader } from "@mantine/core"
import Tag from "../../../../../../../../comp/primitives/tag/Tag";

interface IStep1 {
    onClose: () => void;
}

const Step1 = ({
    onClose
}: IStep1) => {

    const state = useShippingOrderState();
    const dispatch = useShippingOrderDispatch();

    const purchase_orders: IPartialPurchasedOrder[] =
        (state.data?.shipping_order_purchase_order_product ?? [])
            .map(p => p.purchase_order_products?.purchase_order)
            .filter((p): p is IPartialPurchasedOrder => p !== undefined);

    const generatorRowSelectionState = (purchase_orders: IPurchasedOrder[]) => {
        const rowSelectionState: RowSelectionState = {}
        purchase_orders.forEach(p => {
            rowSelectionState[p.id.toString()] = true;
        });
        return rowSelectionState;
    };

    const initialRowSelection = useMemo(
        () => generatorRowSelectionState(purchase_orders as IPurchasedOrder[]),
        []
    );

    const initialState: TableStatePartial = useMemo(
        () => ({ rowSelectionState: initialRowSelection }),
        [initialRowSelection]
    );

    const client = [...purchase_orders].shift()?.client?.company_name || "";

    const [search, setSearch] = useState<string>(client);
    const [selectedPurchasedOrder, setSelectedPurchasedOrder] =
        useState<IPartialPurchasedOrder[]>(purchase_orders);

    const {
        purchasedOrders,
        loadingPurchasedOrders
    } = usePurchasedOrders(search);

    const ExtraComponent = () => {
        return (
            <InputTextCustom
                value={search}
                onChange={setSearch}
                placeholder="Buscar"
                icon={<Search />}

                classNameContainer={StyleModule.inputTextCustomContainer}
            />
        )
    }

    const columns: ColumnDef<IPurchasedOrder>[] = useMemo(() => [
        {
            accessorKey: "order_code",
            header: "Order ID",
            meta: {
                hidden: false,
                autoGenerated: true,
                type: "string"
            }
        },
        {
            accessorKey: "created_at",
            header: "Fecha de orden",
            meta: {
                hidden: false,
                autoGenerated: true,
                type: "date",
                mode: "single"
            }
        },
        {
            id: "client",
            accessorFn: (row) => row.client?.company_name,
            header: "Cliente",
            meta: {
                hidden: false,
                autoGenerated: true,
                type: "string",
            }
        },
        {
            accessorKey: "delivery_date",
            header: "Fecha estimada de entrega",
            meta: {
                hidden: false,
                autoGenerated: true,
                type: "date",
                mode: "range"
            }
        },
        {
            accessorKey: "status",
            header: "Estado",
            meta: {
                hidden: false,
                autoGenerated: true,
                type: "enum",
                enumOptions: [
                    { label: "Pendiente", value: "pending" },
                    { label: "Completado", value: "completed" },
                    { label: "Entregado", value: "delivered" },
                    { label: "Cancelado", value: "cancelled" },
                ]
            },
            cell: ({ getValue, column }) => {
                const valor = getValue() as string;
                const labelEnum = getEnumoSingleLabel(column.columnDef, valor) || "";
                return (
                    <Tag
                        label={labelEnum}
                        className={`${StyleModule[valor.toLowerCase()]}`}
                    />
                );
            }
        }
    ], [purchasedOrders]);

    const handleRowSelectionChange = (selected: IPurchasedOrder[]) => {
        const diffObject: {
            added: IPurchasedOrder[],
            deleted: IPurchasedOrder[]
        } = diffObjectArrays(selectedPurchasedOrder, selected);
        const { added, deleted } = diffObject;
        if (added.length > 0) {
            setSelectedPurchasedOrder(prev => [...prev, ...added]);
            const popsArray: IPurchasedOrderProduct[][] = added.map(p => p.purchase_order_products as IPurchasedOrderProduct[] ?? []);
            const popsFlat: IPurchasedOrderProduct[] = popsArray.flat();
            const sopops: IPartialShippingOrderPurchasedOrderProduct[] = popsFlat.map(p => ({
                purchase_order_products: p,
                purchase_order_product_id: p.id,
                qty: 1,
            }));
            if (sopops.length > 0) {
                dispatch(add_shipping_order_purchased_order_products(sopops));
            }
        }
        if (deleted.length > 0) {
            const poIds = deleted.map(p => p.id);
            setSelectedPurchasedOrder(prev => prev.filter(p => !poIds.includes(p.id || 0)));
            const pops = state.data?.shipping_order_purchase_order_product?.filter(p => poIds.includes(p.purchase_order_products?.purchase_order_id || 0));
            const sopopsIds = (pops?.map(p => p.purchase_order_product_id) ?? []).filter((p): p is number => p !== undefined);
            if (sopopsIds.length > 0) {
                dispatch(remove_shipping_order_purchased_order_products(sopopsIds));
            }
        }
    };

    const conditionalRowSelection = (updater: RowSelectionState, rows: Row<IPurchasedOrder>[]): boolean => {
        const keys: String[] = Object.keys(updater);
        const rowsRecords = rows.filter(row => keys.includes(row.id));
        const records = rowsRecords.map(row => row.original);
        return records.every((p: IPurchasedOrder, _, arr) => p.client?.company_name === arr[0].client?.company_name);
    };

    const handleOnClickNext = () => {
        if (selectedPurchasedOrder.length > 0) {
            dispatch(next_step());
        }
    };

    return (
        <div className={StyleModule.container}>
            <span className={`nunito - bold ${StyleModule.title} `}>Selecciona una orden</span>
            {loadingPurchasedOrders ?
                <Loader
                    size={24}
                    className="nunito-bold"
                />
                :
                <GenericTable
                    modelName="purchased_orders"

                    /* distribuccion de columnas y rows */
                    columns={columns}
                    data={purchasedOrders ? purchasedOrders : []}

                    /* funcionalidades */
                    enablePagination
                    enableFilters
                    enableSorting
                    enableRowSelection

                    /* componentes extra */
                    extraComponents={ExtraComponent}

                    /* acciones */
                    onDeleteSelected={() => { }}
                    getRowId={(row, _) => row.id.toString()}
                    onRowSelectionChange={handleRowSelectionChange}
                    conditionalRowSelection={conditionalRowSelection}
                    initialState={initialState}
                    classNameGenericTableContainer={StyleModule.genericTableContainer}
                />

            }
            <div className={StyleModule.footerSection}>
                <CriticalActionButton
                    onClick={onClose}
                    label="Cancelar"
                />
                <MainActionButtonCustom
                    onClick={handleOnClickNext}
                    label="Siguiente"
                    icon={<ChevronRight />}
                />
            </div>

        </div>
    )
}

export default Step1;
