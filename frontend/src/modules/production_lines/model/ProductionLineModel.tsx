
import MainActionButtonCustom from '../../../comp/primitives/button/custom-button/main-action/MainActionButtonCustom'
import GenericTableMemo from '../../../comp/primitives/table/tableContext/GenericTable'
import type { ColumnDef } from '@tanstack/react-table'
import type { IProductionLine } from 'interfaces/productionLines'
import { PlusIcon } from 'lucide-react'
import { useCallback, useMemo, useState } from 'react'
import StyleModule from './ProductionLineModel.module.css'
import { useTableDispatch, useTableState } from '../../../comp/primitives/table/tableContext/tableHooks'
import { reset_column_filters } from '../../../comp/primitives/table/tableContext/tableActions'
import InputTextCustom from '../../../comp/primitives/input/text/custom/InputTextCustom'
import SecundaryActionButtonCustom from '../../../comp/primitives/button/custom-button/secundary-action/SecundaryActionButtonCustom'
import { Search, Eraser, Download } from 'lucide-react'
import useProductionLines from '../../../modelos/productionLines/hooks/useProductionLines'
import Tag from '../../../comp/primitives/tag/Tag'

const ProductionLineModel = () => {

    const [search, setSearch] = useState<string>("");

    const getRowId = useMemo(() => (row: IProductionLine) => row.id.toString(), []);
    const columns: ColumnDef<IProductionLine>[] = useMemo(() => [
        {
            accessorKey: "id",
            header: "ID",
            meta: {
                hidden: false,
                autoGenerated: false,
                type: "number",
                mode: "range"
            }
        },
        {
            accessorKey: "name",
            header: "Nombre de la línea",
            meta: {
                hidden: false,
                autoGenerated: false,
                type: "string"
            }
        },
        {
            id: "location",
            header: "Ubicación",
            accessorFn: (row) => row.location_production_line?.location?.name,
            meta: {
                hidden: false,
                autoGenerated: false,
                type: "string"
            }
        },
        {
            accessorKey: "is_active",
            header: "Estado",
            cell: ({ row }) => {
                const state = row.original.is_active ? "Activo" : "Detenida";
                return (
                    <div className={StyleModule.containerTag}>
                        <Tag
                            label={state}
                            className={
                                state === "Activo"
                                    ? StyleModule?.tagActive
                                    : StyleModule?.tagInactive
                            }
                        />
                    </div>
                );
            },
            meta: {
                hidden: false,
                autoGenerated: false,
                type: "boolean",
                booleanLabels: ["Detenida", "Activo"]
            }
        }
    ], []);

    const { productionLines, loadingProductionLines } = useProductionLines({ like: search, debounce: 500 })

    const ExtraComponents = useCallback(() => {
        const state = useTableState();
        const dispatch = useTableDispatch();

        const handleClearFilters = useCallback(() => {
            dispatch(reset_column_filters());
        }, [dispatch]);

        const handleExportTable = useCallback(() => {
            console.log("exporting table")
        }, []);

        return (
            <div className={StyleModule.containerExtraComponents}>
                <div className={StyleModule.searchSection}>
                    <InputTextCustom
                        value={search}
                        onChange={setSearch}
                        placeholder="Buscar"
                        icon={<Search />}
                        classNameInput={StyleModule.inputTextCustom}
                        classNameContainer={StyleModule.containerInputSearch}
                        withValidation={false}
                    />
                </div>
                <div className={StyleModule.containerButtons}>
                    <SecundaryActionButtonCustom
                        label="Limpiar filtros"
                        onClick={handleClearFilters}
                        icon={<Eraser />}
                        disabled={state.columnFiltersState.length === 0}
                    />
                    <SecundaryActionButtonCustom
                        label="Exportar tabla"
                        onClick={handleExportTable}
                        icon={<Download />}
                        disabled={Object.keys(state.rowSelectionState).length === 0}
                    />
                </div>
            </div>
        );
    }, [search]);

    return (
        <div className={StyleModule.productionLineModelContainer}>
            <div className={StyleModule.productionLineModelHeader}>
                <h1 className='nunito-bold'>Lineas de producción</h1>
                <MainActionButtonCustom
                    icon={<PlusIcon />}
                    label="Línea de producción"
                    onClick={() => { }}
                />
            </div>
            <GenericTableMemo
                /* modelo e identificador */
                modelName="Líneas de producción"
                getRowId={getRowId}

                /* data y columnas */
                columns={columns}
                data={productionLines}
                isLoadingData={loadingProductionLines}

                /* funcionalidades */
                enablePagination
                enableFilters
                enableSorting

                /* extra components */
                extraComponents={ExtraComponents}

                /* estilos */
                classNameGenericTableContainer={StyleModule.genericTableContainer}
            />
        </div>
    )
}

export default ProductionLineModel
