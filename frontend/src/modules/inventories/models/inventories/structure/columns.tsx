import type {
    ColumnDef
} from "@tanstack/react-table";
import type {
    IInventoryDetails
} from "../../../../../interfaces/inventories";
import BubbleTooltip
    from "../../../../../comp/external/mantine/tooltip/bubble-tooltip/BubbleTooltip";
import StyleModule from "./columns.module.css";
import { formatNumber } from "../../../../../helpers/formttersNumeric";

const columnsInventoryDetails: ColumnDef<IInventoryDetails>[] = [
    // * ******** Campos visibles ********
    {
        accessorKey: "location_name",
        header: "Ubicación",
        meta: {
            hidden: false,
            type: "string",
            typeText: "text",
            autoGenerated: false,
        },
    },
    {
        accessorKey: "item_name",
        header: "Producto",
        meta: {
            hidden: false,
            type: "string",
            typeText: "text",
            autoGenerated: false,
        },
    },
    {
        accessorKey: "stock",
        header: "Stock actual",
        cell: ({ row }) => {
            const value = row.original.stock;
            return (
                <span>{formatNumber(value)}</span>
            );
        },
        meta: {
            hidden: false,
            type: "number",
            mode: "range",
            autoGenerated: false,
        },
    },
    {
        accessorKey: "commited",
        header: "Reservado",
        cell: ({ row }) => {
            const value = row.original.commited;
            console.log(value);
            return (
                <span>{formatNumber(value)}</span>
            );
        },
        meta: {
            hidden: false,
            type: "number",
            mode: "range",
            autoGenerated: false,
        },
    },
    {
        accessorKey: "available",
        header: "Disponible",
        cell: ({ row }) => {
            const value = row.original.available;
            const minimumStock = row.original.minimum_stock;
            return (
                <div>
                    {
                        (value < minimumStock) ? (
                            <BubbleTooltip label={"Stock debajo de la cantidad mínima."}>
                                <span className={StyleModule.minimum_stock}>{formatNumber(value)}</span>
                            </BubbleTooltip>
                        ) : (
                            <span className={StyleModule.available}>{formatNumber(value)}</span>
                        )
                    }

                </div>
            );
        },
        meta: {
            hidden: false,
            type: "number",
            mode: "range",
            autoGenerated: false,
        },
    },
    {
        accessorKey: "minimum_stock",
        header: "Mínimo",
        cell: ({ row }) => {
            const value = row.original.minimum_stock;
            return (
                <span>{formatNumber(value)}</span>
            );
        },
        meta: {
            hidden: false,
            type: "number",
            mode: "range",
            autoGenerated: false,
        },

    },
    {
        accessorKey: "maximum_stock",
        header: "Máximo",
        cell: ({ row }) => {
            const value = row.original.maximum_stock;
            return (
                <span>{formatNumber(value)}</span>
            );
        },
        meta: {
            hidden: false,
            type: "number",
            mode: "range",
            autoGenerated: false,
        },
    },
    // ! ******** Campos ocultos ********
    {
        accessorKey: "inventory_id",
        header: "Inventory ID",
        meta: {
            hidden: true,
            type: "number",
            mode: "single",
            autoGenerated: false,
        },
    },
    {
        accessorKey: "pending_production_qty",
        header: "Pending Production",
        meta: {
            hidden: true,
            type: "number",
            mode: "range",
            autoGenerated: false,
        },
    },
    {
        accessorKey: "item_id",
        header: "Item ID",
        meta: {
            hidden: true,
            type: "number",
            mode: "single",
            autoGenerated: false,
        },
    },
    {
        accessorKey: "item_type",
        header: "Item Type",
        meta: {
            hidden: true,
            type: "string",
            typeText: "text",
            autoGenerated: false,
        },
    },
    {
        accessorKey: "location_id",
        header: "Location ID",
        meta: {
            hidden: true,
            type: "number",
            mode: "single",
            autoGenerated: false,
        },
    },
    {
        accessorKey: "lead_time",
        header: "Lead time",
        meta: {
            hidden: true,
            type: "number",
            mode: "range",
            autoGenerated: false,
        },
    },

];

export { columnsInventoryDetails };
